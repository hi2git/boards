version: '3.4'

services:
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: rabbitmq
    environment:
        RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER:-rabbitmq}
        RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS:-rabbitmq}
    ports:
        - 5672:5672
        - 15672:15672
    restart: on-failure
    healthcheck:
      test: [ "CMD", "nc", "-z", "localhost", "5672" ]
      interval: 1s
      timeout: 10s
      retries: 100

  elastic:
    image: elasticsearch:8.3.2
    container_name: elastic
    mem_limit: 3000m
    environment:
        - KIBANA_PASSWORD=12345678!
        - LOGSTASH_PASSWORD=12345678!
        - xpack.security.transport.ssl.enabled=false
        - xpack.security.http.ssl.enabled=false
        - xpack.security.enabled=false
        - discovery.type=single-node

  kibana:
    image: kibana:8.3.2
    container_name: kibana
    depends_on:
      - elastic
    environment:
        - server.host="localhost"
        - elasticsearch.username=kibana_system
        - ELASTICSEARCH_PASSWORD=12345678!
        - ELASTICSEARCH_HOSTS=http://elastic:9200

  logstash:
    image: logstash:8.3.2
    container_name: logstash
    depends_on:
      - elastic
    environment:
        - server.host="localhost"
    volumes:
        - ./logstash/:/usr/share/logstash/pipeline/

  boards.front:
    image: ${DOCKER_REGISTRY-}boardsfront
    build:
      context: .
      dockerfile: Boards.Front.API\Dockerfile
    depends_on:
      - rabbitmq
      - logstash
      - boards.users
      - boards.boards
      - boards.posts
      - boards.files
    restart: on-failure
    healthcheck:
      test: [ "CMD", "nc", "-z", "localhost", "80" ]
      interval: 1s
      timeout: 10s
      retries: 100

  boards.posts:
    image: ${DOCKER_REGISTRY-}boardsposts
    build:
      context: .
      dockerfile: Boards.Posts.API/Dockerfile
    depends_on:
      - rabbitmq
    restart: on-failure
    healthcheck:
      test: [ "CMD", "nc", "-z", "localhost", "80" ]
      interval: 1s
      timeout: 10s
      retries: 100

  boards.files:
    image: ${DOCKER_REGISTRY-}boardsfiles
    build:
      context: .
      dockerfile: Boards.Files.API/Dockerfile
    depends_on:
      - rabbitmq
    restart: on-failure
    healthcheck:
      test: [ "CMD", "nc", "-z", "localhost", "80" ]
      interval: 1s
      timeout: 10s
      retries: 100

  boards.boards:
    image: ${DOCKER_REGISTRY-}boardsboards
    build:
      context: .
      dockerfile: Boards.Boards.API/Dockerfile
    depends_on:
      - rabbitmq
    restart: on-failure
    healthcheck:
      test: [ "CMD", "nc", "-z", "localhost", "80" ]
      interval: 1s
      timeout: 10s
      retries: 100

  boards.users:
    image: ${DOCKER_REGISTRY-}boardsusers
    build:
      context: .
      dockerfile: Boards.Users.API/Dockerfile
    depends_on:
      - rabbitmq
    restart: on-failure
    healthcheck:
      test: [ "CMD", "nc", "-z", "localhost", "80" ]
      interval: 1s
      timeout: 10s
      retries: 100

